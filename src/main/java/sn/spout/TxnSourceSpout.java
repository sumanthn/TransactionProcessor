package sn.spout;

import backtype.storm.spout.SpoutOutputCollector;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseRichSpout;
import backtype.storm.tuple.Fields;
import backtype.storm.tuple.Values;
import backtype.storm.utils.Utils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import sn.util.NamesUtil;

import java.util.Map;
import java.util.Random;

/**
 * Emits Transaction raw data
 * User: sumanthn
 * Date: 26/7/13
 */
public class TxnSourceSpout extends BaseRichSpout {

    private static final Logger logger = LoggerFactory.getLogger(TxnSourceSpout.class);
    private SpoutOutputCollector outputCollector;
    private int tps = 5 * 1000;
    int waitForMs = 100;
    long tupleCount =0;
    long lastTimeTs = 0;

    final String[] rubisTxn = new String[]{
            //source from Rubis Test Bed
            "/rubis/SearchItemsByRegion?category=10&categoryName=Home_Garden&region=48",
            "/rubis/ViewItem?itemId=38639",
            "/rubis/SearchItemsByCategory?category=4&categoryName=Clothing_Accessories&nbOfItems=120",
            "/rubis/SearchItemsByRegion?category=1&categoryName=Antiques_Art&region=49",
            "/rubis/ViewUserInfo?userId=2287",
            "/rubis/ViewBidHistory?itemId=16433",
            "/rubis/StoreBid",
            "/rubis/StoreComment",
            "/rubis/AboutMe",
            "/rubis/SearchItemsByCategory?category=4&categoryName=Clothing_Accessories&nbOfItems=150",
            "/rubis/SearchItemsByRegion?category=1&categoryName=Antiques_Art&region=55",
            "/rubis/ViewUserInfo?userId=3490",
            "/rubis/ViewBidHistory?itemId=323",
            "/rubis/StoreBid",
            "/rubis/SearchItemsByCategory?category=4&categoryName=Clothing_Accessories&nbOfItems=10",
            "/rubis/SearchItemsByRegion?category=1&categoryName=Antiques_Art&region=300",
            "/rubis/ViewUserInfo?userId=3223",
            "/rubis/ViewBidHistory?itemId=90",
            "/rubis/StoreBid",
            "/rubis/StoreBid",
            "/rubis/StoreComment",
            "/rubis/AboutMe",
            "/rubis/SearchItemsByCategory?category=4&categoryName=Clothing_Accessories&nbOfItems=500"



    };

    final int[] responseCodeArr = new int[]{
            //need more success
            200,
            401, 401,
            200, 200, 200,
            201,
            401,
            200, 200, 200, 200,
            500,
            200, 200, 200, 200, 200, 200
    };

    //500 ip addresses
    private long [] ipAddr = new long[]{
            1077897221L,3272366254L,1958696840L,2422165013L,1906156295L,1073768054L,1148430686L,3112584894L,295224748L,43014050L,40476774L,2141326086L,709252479L,411194471L,1413376842L,1134975527L,1093544641L,2458794139L,279874325L,1773257138L,1076406881L,2745258631L,1009327676L,62216029L,1183994986L,24401509L,2210099653L,2995408198L,1581354018L,811107332L,3044457514L,1832090634L,1078536810L,2722001071L,274738593L,3277155940L,3296543633L,2937340430L,3317655946L,174678109L,2725648157L,1348493730L,319846518L,759336575L,1103277741L,1442914321L,2399278246L,2787853174L,103180220L,1063271852L,3165174333L,986029723L,1684911803L,3266453632L,526753667L,2042455716L,2897972344L,157518641L,57690961L,357600849L,1023646513L,2506458233L,52253981L,960585048L,2657683782L,311129436L,1652167783L,2761432948L,2945294240L,630214322L,520374790L,1367870496L,2107092615L,1848274081L,1820677552L,775250101L,1721775168L,3272421534L,1835740355L,1940064099L,2552726578L,1234547556L,1001104475L,2844562210L,2987065465L,2065576735L,592774670L,487889944L,3217045667L,2540736793L,792612122L,1672490823L,1376593175L,78002179L,881591740L,1495249782L,67509143L,2560982301L,1486953021L,2931001190L,2989507448L,1975493303L,1621799486L,2198316734L,1678518179L,1365186168L,1208968303L,2502466921L,1365844654L,462953105L,3099215485L,539125803L,2528972707L,2200802190L,2997308784L,476645690L,841709391L,1769176488L,705267031L,3042181556L,2551123041L,2293209151L,2406437162L,1896552544L,784576059L,2097617194L,136413699L,3173369200L,2595126973L,1433958799L,3275519076L,815835019L,1480375829L,2922084616L,110995851L,1746617497L,3291904550L,23431961L,2517221774L,1561745033L,2792912398L,2438116242L,173251355L,2940060599L,109859386L,455650735L,2687936187L,107576638L,51254841L,1101088645L,2187304556L,2844625810L,978472860L,2281861157L,2485672004L,2303094469L,1129870203L,3007063099L,1671775249L,2375310625L,3010564261L,2307750485L,1797259589L,1066372176L,2007181857L,513981885L,1093692964L,2760194114L,559916682L,2831108627L,912600243L,548959917L,1501702581L,2511224633L,1579714753L,1991777908L,1662276950L,1197285042L,2810920027L,2977212311L,3041544817L,2301624601L,1079904321L,326974739L,1898193820L,1688293905L,828357950L,1050422566L,629325925L,815229304L,2504747612L,2679178121L,426748560L,1076453172L,11091222L,3065782436L,1501442405L,3214311600L,1115138895L,458313032L,76154175L,1493258779L,1000053787L,403358525L,2857877837L,3206039056L,1009207567L,2483319662L,2225687297L,2290009281L,1485739781L,2660528224L,403247438L,459821932L,1413459872L,1200229147L,1414076773L,2827921585L,604619321L,640240439L,2474392872L,2082711333L,512166951L,34958718L,2377431991L,309248839L,2067798118L,135765543L,951657530L,1058560907L,1771981354L,1597013253L,2420675584L,1237257117L,1656238014L,3228477023L,2600889270L,3259793497L,2458344049L,478484322L,1270963281L,2233739111L,2192993406L,2170034877L,2101249705L,2679664164L,275201959L,1901419421L,1382851427L,688014478L,107041844L,1281201565L,1000808223L,2947065617L,773833387L,1347422096L,1568840482L,1035222634L,222890759L,272172374L,631049317L,3010099118L,3130666048L,2106393251L,1594984792L,1715227672L,1395353611L,1247217744L,2105516890L,831796095L,1889872697L,2894473377L,565752723L,682238339L,1598338166L,3047717955L,641514822L,2669849652L,2879873362L,1565487749L,1849932349L,207581523L,2853440578L,1069159050L,27947344L,61368736L,2948277096L,1044663302L,1816545705L,865280936L,765673858L,2123596685L,1815392927L,608240128L,981213852L,1652118895L,440911110L,3172273695L,563165845L,376045992L,644308070L,1446791038L,170893943L,18370644L,2049645194L,2981498269L,615792972L,969019292L,1327379835L,2025486512L,2769262235L,1382190645L,497558380L,17865006L,1579264060L,1722639108L,2401647813L,910776458L,275292696L,946053212L,1732926515L,496507200L,800270438L,2439746424L,2639751487L,2493164805L,411710066L,269110977L,1214012264L,2932102849L,688428850L,223779911L,2456967347L,2542416663L,2436473639L,1570152728L,1086215846L,830688666L,675914114L,3200296292L,1518691491L,201491392L,2249686838L,247731650L,1117340320L,599555374L,760395953L,1645630769L,2032892763L,1298101340L,2772921101L,1738029093L,1112087132L,154168206L,776056747L,2273878055L,839011751L,1661385753L,138052286L,1753517882L,2621187840L,509494636L,721971839L,2131998267L,572094023L,2689222052L,2154914823L,1985512235L,3199903122L,3180684333L,2871242169L,2905064714L,3177537377L,1074682290L,1069298582L,1622520414L,2892511031L,1851800509L,2819862868L,813260843L,3125920336L,1712020096L,2711772747L,756965478L,1918984267L,945793117L,1065296135L,1227640719L,464657091L,353635115L,2773565448L,2436432217L,1466448233L,76042805L,379498368L,89805678L,2452305570L,437078805L,1326209075L,3074985374L,2775144541L,162825290L,2327737411L,1499466321L,1419260265L,1544235073L,2056680618L,2921667496L,1673834521L,2324542608L,3071841806L,3175587224L,2388478982L,868065066L,303632557L,1448520332L,1586640951L,2879345268L,775842453L,429134372L,1900624266L,829049631L,2819061185L,293741127L,928886544L,1318256957L,59642161L,2744284232L,1882039703L,1376749472L,2488384325L,2385840165L,1730265279L,709997834L,2125084691L,1394103099L,2940442547L,171003264L,1875196092L,2903051794L,2218764122L,647047474L,1571170158L,807355558L,1554611112L,1583302157L,1988991940L,2653556535L,1159313022L,1249867435L,974328883L,67335259L,3291049111L,908003969L,476152413L,2374211730L,258158877L,892498786L,2020680625L,2426209949L,3099675648L,1688111439L,62821153L,2086492188L,546933648L,2845923380L,2639350286L,302726195L,391864935L,1067739248L,1736590205L,1596940111L,2521332806L,2070775486L,196961892L,2323550808L,2972394557L,605371793L,2069447298L,2847179036L,2494965835L,2888395703L,167815681L,2930928227L,944323470L,1516850814L,3242270647L,2944811713L,957428100L,2406785317L,614504329L,1242446660L,1208697977L,2898088547L,3165874243L,398605105L,2187694937L,1552462764L,274304263L,2443598017L
    };

    Random urlRandomGen = new Random();
    Random rcodeGen = new Random();
    Random responseTimeGen = new Random();
    Random multiplier = new Random();
    Random clientIpR = new Random();

    int maxUrlItems = rubisTxn.length;
    int maxResponseCodeLen = responseCodeArr.length;
    int clientIpMax =  ipAddr.length;


    Values formTuple() {
        //TODO:induce timestamp here
        return new Values(rubisTxn[urlRandomGen.nextInt(maxUrlItems)],
                responseCodeArr[rcodeGen.nextInt(maxResponseCodeLen)],
                Math.abs(multiplier.nextInt(300)),
                ipAddr[clientIpR.nextInt(clientIpMax)],
                System.currentTimeMillis()
        );
    }

    @Override
    public void declareOutputFields(OutputFieldsDeclarer declarer) {
        //Emits URL, Response Code, Response Time , Client IP and timestamp for transaction
        declarer.declare(new Fields(
                NamesUtil.URL_FLD,
                NamesUtil.RESPONSE_CODE_FLD,
                NamesUtil.RESPONSE_TIME_FLD,
                NamesUtil.CLIENT_IP_FLD,
                NamesUtil.TXN_START_TS

                ));
    }

    @Override
    public void open(Map map, TopologyContext topologyContext, SpoutOutputCollector outputCollector) {
        this.outputCollector = outputCollector;
    }

    @Override
    public void nextTuple() {
        int chunkCount = (tps *10) /waitForMs;
        int i=0;


        for(;i< chunkCount;i++){
            outputCollector.emit(formTuple());
        }
        tupleCount +=i;
        if ((System.currentTimeMillis() - lastTimeTs) > 1000){

            if (logger.isDebugEnabled())
                logger.debug("hit second interval " +  tupleCount);
            lastTimeTs = System.currentTimeMillis();
            tupleCount=0;
        }

        Utils.sleep(waitForMs);
      }
}
